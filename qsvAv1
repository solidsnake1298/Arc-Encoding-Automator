#!/bin/bash

# Debug output
#set -ex

###########################
# Assumes jellyfin-ffmpeg is installed and symlinked in /usr/bin.
# May work with vanilla ffmpeg, but may require additional Intel drivers.
# Must have parallel, jq, and bc installed.
# User running this script must be in render group.  Requires user logout if added to group.
##########################

# Variable initialization.  Work-in-progress initialization and cleanup.
INPUTFILE=""
CHAPTERSEPISODE=0
DV=0
ANIME=0
RESCALE=0
FOSS=0
WIP=/media/library/wip
mkdir -p $WIP
rm -f $WIP/*
PARALLEL=$WIP/parallel.txt
cat /dev/null > $PARALLEL
AUDIO_COMMAND=""
MAPPING_COMMAND=""
SEASONNUM=""
EPISODESTART=""
CONVERTAUDIO=0
STARTEND=""
FILTERS=""
INPUT_LIST=""
MAPPING=""

# Reads input paramamters
while getopts i:c:d:a:r:f:s:e:o: option; do
        case $option in
                i) INPUTFILE=${OPTARG};;
                c) CHAPTERSEPISODE=${OPTARG};;
                d) DV=${OPTARG};;
                a) ANIME=${OPTARG};;
                r) RESCALE=${OPTARG};;
                f) FOSS=${OPTARG};;
		s) SEASONNUM=${OPTARG};;
		e) EPISODESTART=${OPTARG};;
		o) CONVERTAUDIO=${OPTARG};;
               \?) echo "Invalid option"
                   exit;;
        esac
done

# Checks for required input file name
if [ -z "$INPUTFILE" ]; then
        echo "No input file was provided."
        exit 1
fi

# Uses Intel QSV to encode the original or DV converted video to AV1.  Muxes in the converted and/or language selected audio and subtitles.
# Includes attachments if present.  If splitting out episodes from a MKV that came off the disc as a single file, it will loop through for each episode.
av1Encode () {
for chapter in $STARTSTOP ; do
        begin=$(echo $chapter | awk -F ':' '{print $1}')
        end=$(echo $chapter | awk -F ':' '{print $2}')
        if [ $CHAPTERSEPISODE -eq 0 ]; then
                outputFile=$(echo "$INPUTFILE" | sed "s/.mkv/-all.mkv/g")
        else
                outputFile=$(echo "$INPUTFILE" | sed "s/.mkv/-chapter-$begin-$end.mkv/g")
        fi
        startTime=$(jq .chapters[$begin].start_time $WIP/chapters.json | sed 's/\"//g')
        endTime=$(jq .chapters[$end].end_time $WIP/chapters.json | sed 's/\"//g')
        ffmpeg \
                -init_hw_device vaapi=va:,driver=iHD,kernel_driver=i915 -y -hide_banner -stats -fflags genpts -loglevel error \
                -init_hw_device qsv=qs@va \
                -filter_hw_device qs \
                -hwaccel qsv \
                -hwaccel_output_format qsv \
                -i "$INPUTFILE" \
                $INPUT_LIST \
                -ss $startTime \
                -to $endTime \
                -map_chapters 0 \
                $MAPPING \
                -c:v av1_qsv \
                -preset veryslow \
                -vf vpp_qsv="$FILTERS" \
                -c:a copy \
                -c:s copy \
                -global_quality:v 26 \
                -look_ahead 1 \
                -look_ahead_depth 100 \
                "$outputFile"
done
}

# During FOSS audio conversion, audio tracks are extracted and need to be re-muxed for easier insertion into the final video
buildAudioMapping () {
	i=0     
	for file in `ls $WIP/track_*.mka`; do
		AUDIO_COMMAND="$AUDIO_COMMAND -i $file "
		MAPPING_COMMAND="$MAPPING_COMMAND -map $i:a "
		i=$(echo $i + 1 |bc)
	done
	ffmpeg -y -fflags genpts -hide_banner -loglevel error -stats $AUDIO_COMMAND $MAPPING_COMMAND -c:a copy $WIP/audio.mka
}

# Converts audio to FLAC or vorbis.  Lossless codecs will be converted to FLAC, everything else vorbis.
fossAudioConversion () {
	if [ $ANIME -eq 1 ]; then
                ffprobe -loglevel error -i "$INPUTFILE" -select_streams a -show_entries stream -v quiet -of json | \
			jq '[.streams[] | select((.tags.language == ("eng") or .tags.language == ("jpn")))]' > $WIP/audio.json
        else
                ffprobe -loglevel error -i "$INPUTFILE" -select_streams a -show_entries stream -v quiet -of json | \
			jq '[.streams[] | select((.tags.language == ("eng")))]' > $WIP/audio.json
        fi

        i=0
        cat /dev/null > $WIP/transcodeaudio.txt

        jq '.[].index' $WIP/audio.json | while read rawIndex; do
                codec=$(jq --arg l $i '.[$l|fromjson].profile' $WIP/audio.json)

                if [ "$codec" = "null" ]; then
                        codec=$(jq --arg l $i '.[$l|fromjson].codec_name' $WIP/audio.json)
                fi
        
                index=$(echo $(( $rawIndex - 1 | bc)))
                echo "$rawIndex:$codec" >> $WIP/transcodeaudio.txt
                i=$(echo $i + 1 |bc)
        done
        
        cat /dev/null > $WIP/outputcodecs.txt

        cat $WIP/transcodeaudio.txt | while read inputCodec; do
                index=$(echo $inputCodec | awk -F ':' '{print $1}')
                codec=$(echo $inputCodec | awk -F ':' '{print $2}' | tr '[:upper:]' '[:lower:]')
		if [ -z "`echo $codec | egrep -i 'truehd|true hd|dts-hd ma|dts-hd'`" ]; then
                        outputCodec="vorbis"
                else
                        outputCodec="flac"
                fi
                echo "$index:$outputCodec" >> $WIP/outputcodecs.txt
        done

        cat $WIP/outputcodecs.txt | while read transcodeList ; do
                index=$(echo $transcodeList | awk -F ':' '{print $1}')
                codec=$(echo $transcodeList | awk -F ':' '{print $2}')

                if [ "$codec" = "vorbis" ]; then
                        echo "ffmpeg -hide_banner -loglevel error -stats -y -i \"`echo $INPUTFILE`\" -c:a libvorbis -q:a 6 -sample_fmt fltp -map 0:$index $WIP/track_$index.mka" >> $PARALLEL
                else
                        echo "ffmpeg -hide_banner -loglevel error -stats -y -i \"`echo $INPUTFILE`\" -c:a flac -sample_fmt s32 -map 0:$index $WIP/track_$index.mka" >> $PARALLEL
                fi
        done

        echo "ffmpeg -hide_banner -loglevel error -stats -y -i \"$INPUTFILE\" -vn -an -c:s copy $LANG_OPTIONS $WIP/subtitles.mkv" >> $PARALLEL

	processParallelTasks
}

# Remuxes new audio with original video
convertAudioOnly () {
for chapter in $STARTSTOP ; do
        begin=$(echo $chapter | awk -F ':' '{print $1}')
        end=$(echo $chapter | awk -F ':' '{print $2}')
	outputFile=$(echo "$INPUTFILE" | sed "s/.mkv/-audioOnly.mkv/g")
	startTime=$(jq .chapters[$begin].start_time $WIP/chapters.json | sed 's/\"//g')
	endTime=$(jq .chapters[$end].end_time $WIP/chapters.json | sed 's/\"//g')
	ffmpeg -y -fflags genpts -hide_banner -loglevel error -stats \
		-i "$INPUTFILE" -i "$WIP/audio.mka" -i "$WIP/subtitles.mkv" \
		-ss $startTime \
		-to $endTime \
		-map_chapters 0 \
		-map 0:v \
		-map 1:a \
		-map 2:s \
		-map 0:t? \
		-c:v copy \
		-c:a copy \
		-c:s copy \
		"$outputFile"
done
}

splitEpisodes () {
	chapters=$1

	# Probes videos for chapter information and prints to text file
	ffprobe -loglevel error -i "$INPUTFILE" -print_format json -show_chapters -loglevel error > $WIP/chapters.json

        # Parses json file for the start time of each chapter.  Also counts number of chapters
        rawChapters=$(jq .chapters[].start_time $WIP/chapters.json | wc -l)
        # ffmpeg chapters start at zero.  Subtracting 1 to align with last chapter.
        totalChapters=$(echo $(($rawChapters - 1)) | bc)

	if [ $chapters -ne 0 ]; then
		i=0
		STARTSTOP=""
		# Builds a colon separated list of chapter start:end
		while [ $i -le $totalChapters ]; do
			first=$i
		        last=$(echo $(($i + $CHAPTERSEPISODE - 1)) | bc)
		        STARTSTOP=$(echo "$STARTSTOP $first:$last")
		        i=$(echo $(($i + $CHAPTERSEPISODE)) | bc)
	        done
	else
		STARTSTOP="0:$totalChapters"
	fi
}

# Generates video filters for vpp_qsv
generateFilters () {
	# ffprobe to determine if interlaced.  If yes, set yadif deinterlace filter.
	rawParams=$(ffprobe -loglevel error -i "$INPUTFILE" -select_streams v:0  -show_entries stream=width,height,field_order)
	interlaced=$(echo $rawParams | grep -o 'field_order=[a-z]\+' | awk -F '=' '{print $2}')
	deinterlaced=""

	case $interlaced in
	        tt) deinterlaced="deinterlace=2";;
	        bb) deinterlaced="deinterlace=2";;
	        tb) deinterlaced="deinterlace=2";;
	        bt) deinterlaced="deinterlace=2";;
	        *) deinterlaced="deinterlace=0";;
	esac

	# ffmpeg to detect black bars for cropping.
	rawCrop=$(ffmpeg -ss 250 -to 260 -i "$INPUTFILE" -vf cropdetect=mode=black,metadata=mode=print -f null - 2>&1 | awk '/crop=/ {a=$NF} END{print a}' | awk -F '=' '{print $2}')

	w=$(echo $rawCrop | awk -F ":" '{print $1}')
	h=$(echo $rawCrop | awk -F ":" '{print $2}')
	x=$(echo $rawCrop | awk -F ":" '{print $3}')
	y=$(echo $rawCrop | awk -F ":" '{print $4}')

	# Combines crop and deterinterlace filters.  Always present.
	cropParams="$deinterlaced:cw=$w:ch=$h:cx=$x:cy=$y:async_depth=4"

	# Combines filters
	FILTERS="`echo $cropParams``echo $rescaleParams`"
}

# Converts Dolby Vision to HDR10 by removing the DV side channel.  Leaves the BT2020 video as is.
convertDolbyVision () {
        # Extracts the video and discards the DV side channel data
	ffmpeg -y -hide_banner -loglevel error -stats -i "$INPUTFILE" -dn -c:v copy -vbsf hevc_mp4toannexb -f hevc - | \
		dovi_tool remove - -o $WIP/video.hevc
        # Takes the HEVC stream and inserts into MP4 container
        echo "ffmpeg -hide_banner -loglevel error -stats -y -fflags genpts -i $WIP/video.hevc -c:v copy $WIP/video.mp4" >> $PARALLEL

        # Creates final input file parameters and mapping
        INPUT_LIST="-i $WIP/video.mp4 -i $WIP/audio.mka -i $WIP/subtitles.mkv"
        MAPPING="-map 1:v -map 2:a -map 3:s? -map 0:t?"
}

# Runs all tasks in the parallel text file, 6 at a time
processParallelTasks () {
	cat $PARALLEL | parallel -j 6 --verbose '{}'
	cat /dev/null > $PARALLEL
}

# Only performs language selection
processAudioSubs () {
	echo "ffmpeg -hide_banner -loglevel error -stats -y -i \"$INPUTFILE\" -vn -sn -c:a copy $LANG_OPTIONS $WIP/audio.mka" >> $PARALLEL
	echo "ffmpeg -hide_banner -loglevel error -stats -y -i \"$INPUTFILE\" -vn -an -c:s copy $LANG_OPTIONS $WIP/subtitles.mkv" >> $PARALLEL
}

# Creates lanuage English selection parameters for audio and subtitles.  If ANIME option is enabled, also selects Japanese tracks.
LANG_OPTIONS="" 
if [ $ANIME -eq 1 ]; then
	echo "Selecting English and Japanese audio/subtitle tracks."
        LANG_OPTIONS="-map 0:m:language:eng? -map 0:m:language:jpn?"
else
	echo "Selecting English audio/subtitle tracks."
        LANG_OPTIONS="-map 0:m:language:eng?"
fi

# If the -c option is used to provide the number of chapters per episode, in instances where a rip has all episodes in one MKV, this will call
# the function.  Otherwise the entire file will be processed.
echo "Generating chapter start/stop times."
splitEpisodes $CHAPTERSEPISODE

# Analyzes video, generates crop, deinterlace, video quality, rescaling parameters for insertion in vpp_qsv filter.
echo "Generating video filter parameters."
generateFilters

# If the -f 1 option is used, all audio tracks will be converted to FOSS audio codecs
# Lossless codecs will be converted to FLAC. Lossy codecs will be converted to vorbis.

if [ $FOSS -eq 1 ]; then
	echo "Converting audio to FLAC/Vorbis.  Performing audio/sub language selection."
        fossAudioConversion
	buildAudioMapping
else
	echo "Performing audio/sub language selection."
        processAudioSubs
fi

# If -d 1 option is used, converts Dolby Vision to HDR10.  Tested with DV 7.6 and 8.1.  Else just extract audio and subtitles and perform language selection.
# Also creates final input file and mapping parameters
if [ $DV -eq 1 ] && [ $CONVERTAUDIO -eq 0 ]; then
	echo "Converting Dolby Vision to HDR10."
        convertDolbyVision
	echo "Generating final input list and mappings."
else
	echo "Generating final input list and mappings."
        INPUT_LIST="-i $WIP/audio.mka -i $WIP/subtitles.mkv"
        MAPPING="-map 0:v -map 1:a -map 2:s? -map 0:t?"
fi

# Processes tasks queued up in PARALLEL
echo "Processing queued parallel tasks"
processParallelTasks

# Iterates through chapter list
if [ $CONVERTAUDIO -eq 1 ] && [ $FOSS -eq 1 ] ; then
	echo "Muxing new audio with original video."
        convertAudioOnly
else
	echo "Muxing audio with new AV1 video."
        av1Encode
fi

# WIP cleanup
echo "Cleaning up WIP folder."
rm -f $WIP/*
