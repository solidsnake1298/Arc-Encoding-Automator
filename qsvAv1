#!/bin/bash

# Debug output
#set -ex

###########################
# Assumes jellyfin-ffmpeg is installed and symlinked in /usr/bin.
# Most functions may work with vanilla ffmpeg, but may require additional Intel drivers.
# Removing Dolby Vision function requires jellyfin-ffmpeg 7.0.2-4 and newer.
# Must have jq and bc installed.
# User running this script must be in render group.  Requires user logout if added to group.
##########################

# Variable initialization.  Work-in-progress initialization and cleanup.
INPUTFILE=""
CHAPTERSEPISODE=0
DV=0
ANIME=0
RESCALE=0
FOSS=0
CONVERTAUDIO=0
FILTERS=""
AUDIO_COMMAND="-c:a libopus -vbr on -compression_level 10 -application audio"
SUB_COMMAND=""

# Reads input paramamters
while getopts i:c:d:a:r:f:s:e:o: option; do
        case $option in
                i) INPUTFILE=${OPTARG};;
                c) CHAPTERSEPISODE=${OPTARG};;
                d) DV=${OPTARG};;
                a) ANIME=${OPTARG};;
                r) RESCALE=${OPTARG};;
                f) FOSS=${OPTARG};;
		s) SEASONNUM=${OPTARG};;
		e) EPISODESTART=${OPTARG};;
		o) CONVERTAUDIO=${OPTARG};;
               \?) echo "Invalid option"
                   exit;;
        esac
done

WIP=/media/library/wip
mkdir -p "$WIP"
rm -f "$WIP/*"

# Checks for required input file name
if [ -z "$INPUTFILE" ]; then
        echo "No input file was provided."
        exit 1
fi

# Checks for subtitle track.
emptySubJson=$(ffprobe -loglevel error -i "$INPUTFILE" -select_streams s -show_entries stream -v quiet -of json | jq '[.streams[]]' | jq -e '. | length == 0')

# Uses Intel QSV to encode the original or DV converted video to AV1.  Maps the audio tracks for the selected languages, and converts to them to OPUS.
# Includes attachments if present.  If splitting out episodes from a MKV that came off the disc as a single file, it will loop through for each episode.
av1Encode () {
for chapter in $STARTSTOP ; do
	audioCommand=$(cat "$WIP/audioCommand.txt")
	subCommand=$(cat "$WIP/subCommand.txt")
        begin=$(echo $chapter | awk -F ':' '{print $1}')
        end=$(echo $chapter | awk -F ':' '{print $2}')
        startTime=$(jq .chapters[$begin].start_time "$WIP/chapters.json" | sed 's/\"//g')
        endTime=$(jq .chapters[$end].end_time "$WIP/chapters.json" | sed 's/\"//g')
	chapterSelect=""
        if [ $CHAPTERSEPISODE -eq 0 ]; then
                outputFile=$(echo "$INPUTFILE" | sed "s/.mkv/-all.mkv/g")
        else
                outputFile=$(echo "$INPUTFILE" | sed "s/.mkv/-chapter-$begin-$end.mkv/g")
		chapterSelect="-ss $startTime -to $endTime"
        fi
        startTime=$(jq .chapters[$begin].start_time "$WIP/chapters.json" | sed 's/\"//g')
        endTime=$(jq .chapters[$end].end_time "$WIP/chapters.json" | sed 's/\"//g')
        ffmpeg \
                -init_hw_device vaapi=va:,driver=iHD,kernel_driver=i915 -y -hide_banner -stats -fflags +genpts+igndts -loglevel error \
                -init_hw_device qsv=qs@va \
                -filter_hw_device qs \
                -hwaccel qsv \
                -hwaccel_output_format qsv \
		-extra_hw_frames 40 \
                -i "$INPUTFILE" \
                $chapterSelect \
                -map_chapters 0 \
		-map 0:v \
                -c:v av1_qsv \
		-pix_fmt yuv420p10le \
                -q:v 22 \
                -look_ahead_depth 40 \
                -preset veryslow \
                -vf vpp_qsv="$FILTERS" \
		$audioCommand \
		$subCommand \
		-map 0:t? \
		-disposition:s 0 \
		-low_delay_brc 1 \
		-extbrc 1 \
		-adaptive_i 1 \
		-adaptive_b 1 \
		-b_strategy 1 \
		-bf 39 \
		-max_muxing_queue_size 2048 \
		-max_interleave_delta 0 \
		-avoid_negative_ts auto \
                "$outputFile"
done
}

# Converts audio to OPUS.  If lossless tracks are present for a language, lossy tracks for that language are ignored.
audioPreProcessing () {
	cat /dev/null > "$WIP/audioFinal.txt"
	emptyAudioJson=$(cat "$WIP/audio.json" | jq -e '. | length == 0')
	if [ $ANIME -eq 1 ]; then
		# checks if audio.json is empty due to untagged streams
		if [ "${emptyAudioJson}" = 'true' ]; then
			ffprobe -loglevel error -i "$INPUTFILE" -select_streams a -show_entries stream -v quiet -of json | jq '[.streams[]]' > "$WIP/audio.json"
		fi

		# if lossless tracks are present, ignore lossy tracks
		if [ "${emptyAudioJson}" = 'true' ]; then
			cat "$WIP/audio.json" > "$WIP/audioFinal.txt"
		else
			lossless=$(jq -r '.[] | select(.tags.language == ("eng"))' "$WIP/audio.json" | egrep -i "dts-hd ma|truehd" | head -1)
			if [ ! -z "$lossless" ]; then
				codec=$(echo $lossless | awk -F ': ' '{print $2}' | sed 's/,//g' | sed 's/\"//g')
				if [ ! -z "`echo $codec | grep -i dts`" ]; then
					cat "$WIP/audio.json" | jq -r '.[] | select(.profile == ("DTS-HD MA") and .tags.language == ("eng")) | .index' >> "$WIP/audioFinal.txt"
				elif [ ! -z "`echo $codec | grep -i truehd`" ]; then
					cat "$WIP/audio.json" | jq -r '.[] | select(.codec_name == ("truehd") and .tags.language == ("eng")) | .index' >> "$WIP/audioFinal.txt"
				fi
			else
				cat "$WIP/audio.json" | jq -r '.[] | select(.tags.language == ("eng")) | .index' >> "$WIP/audioFinal.txt"
			fi
                        lossless=$(jq -r '.[] | select(.tags.language == ("jpn"))' "$WIP/audio.json" | egrep -i "dts-hd ma|truehd" | head -1)
                        if [ ! -z "$lossless" ]; then
                                codec=$(echo $lossless | awk -F ': ' '{print $2}' | sed 's/,//g' | sed 's/\"//g')
                                if [ ! -z "`echo $codec | grep -i dts`" ]; then
					cat "$WIP/audio.json" | jq -r '.[] | select(.profile == ("DTS-HD MA") and .tags.language == ("jpn")) | .index' >> "$WIP/audioFinal.txt"
                                elif [ ! -z "`echo $codec | grep -i truehd`" ]; then
					cat "$WIP/audio.json" | jq -r '.[] | select(.codec_name == ("truehd") and .tags.language == ("jpn")) | .index' >> "$WIP/audioFinal.txt"
                                fi
                        else
				cat "$WIP/audio.json" | jq -r '.[] | select(.tags.language == ("jpn")) | .index' >> "$WIP/audioFinal.txt"
                        fi
		fi
        else
                # checks if audio.json is empty due to untagged streams
                if [ "${emptyAudioJson}" = 'true' ]; then
                        ffprobe -loglevel error -i "$INPUTFILE" -select_streams a -show_entries stream -v quiet -of json | jq '[.streams[]]' > "$WIP/audio.json"
                fi

                if [ "${emptyAudioJson}" = 'true' ]; then
		        cat "$WIP/audio.json" > "$WIP/audioFinal.txt"
		else
                	lossless=$(egrep -i "dts-hd ma|truehd" "$WIP/audio.json" | head -1)
	                if [ ! -z "$lossless" ]; then
	                        codec=$(echo $lossless | awk -F ': ' '{print $2}' | sed 's/,//g' | sed 's/\"//g')
	                        if [ ! -z "`echo $codec | grep -i dts`" ]; then
					cat "$WIP/audio.json" | jq -r '.[] | select(.profile == ("DTS-HD MA")) | .index' >> "$WIP/audioFinal.txt"
	                        elif [ ! -z "`echo $codec | grep -i truehd`" ]; then
					cat "$WIP/audio.json" | jq -r '.[] | select(.codec_name == ("truehd")) | .index' >> "$WIP/audioFinal.txt"
	                        fi
	                else
	                        cat "$WIP/audio.json" > "$WIP/audioFinal.txt"
	                fi        
		fi
	fi
}

# Uses the tracks selected in the pre-processing function to generate the map parameters for OPUS.
fossAudioMapping () {
	audioCommand=""
        while read rawIndex; do
		if [ $rawIndex -eq 0 ]; then
			index=0
		else
			index=$(echo $(( $rawIndex - 1 | bc)))
		fi
		audioCommand="$audioCommand -map 0:a:${index}"
                channels=$(jq --arg l $index '.[$l|fromjson].channels' "$WIP/audio.json")
		
		if [ $channels -gt 2 ]; then
			opusMapping=1
		else
			opusMapping=0
		fi

		audioCommand="$audioCommand -ac:a:${index} ${channels} -mapping_family:a:${index} ${opusMapping}"
	done <<< "$(cat $WIP/audioFinal.txt)"
	echo "$AUDIO_COMMAND $audioCommand" > "$WIP/audioCommand.txt"
}

# Uses the tracks selected in the pre-processing function to generate the map parameters.
audioMapping () {
        audioCommand=""
        while read rawIndex; do
                if [ $rawIndex -eq 0 ]; then
                        index=0
                else
                        index=$(echo $(( $rawIndex - 1 | bc)))
                fi
                audioCommand="$audioCommand -map 0:a:${index}"
        done <<< "$(cat $WIP/audioFinal.txt)"
        echo "$audioCommand" > "$WIP/audioCommand.txt"
}

# Uses the tracks selected in the pre-processing function to generate the map parameters.
subMapping() {
	subCommand=""
	firstSub=$(ffprobe -loglevel error -i "$INPUTFILE" -select_streams s -show_entries stream -v quiet -of json | jq -r '.streams[0] | .index' | bc)
	# Checks for no subtitle track.  Common for older fansubs with burned in subtitles.
	if [ "${emptySubJson}" = 'true' ]; then
		echo "No subtitle track"
		subCommand="-sn"
	else
		# If audio language tags are not present, safe to assume sub language tags aren't either
		if [ "${emptyAudioJson}" = 'true' ]; then
			subCommand="-map 0:s -c:s copy"
		else
			subCommand="-c:s copy"
			while read rawIndex; do
				index=$(echo $(( $rawIndex - $firstSub | bc)))
				subCommand="$subCommand -map 0:s:$index"
			done <<< "$(jq '.[].index' $WIP/subtitles.json)"
		fi
	fi
	echo "$subCommand" > "$WIP/subCommand.txt"
}

# Maps selected audio/sub tracks to output file.  Converts to OPUS if enabled.
selectLanguageOnly () {
	extension=$(echo "$INPUTFILE" | awk -F '.' '{print $NF}')
	outputFile=$(echo "$INPUTFILE" | sed "s/.${extension}/-audioOnly.mkv/g")
	audioCommand=$(cat "$WIP/audioCommand.txt")	
	subCommand=$(cat "$WIP/subCommand.txt")

	ffmpeg -y -fflags +genpts+igndts -hide_banner -loglevel error -stats \
		-i "$INPUTFILE" \
		-map_chapters 0
		-map 0:v \
		$audioCommand \
		$subCommand \
		-map 0:t? \
		-codec copy \
		-disposition:s 0 \
                -max_muxing_queue_size 2048 \
                -max_interleave_delta 0 \
		-avoid_negative_ts auto \
		"$outputFile"
}

# Extracts chapter data from input file.
splitEpisodes () {
	chapters=$1

	# Probes videos for chapter information and prints to text file
	ffprobe -loglevel error -i "$INPUTFILE" -print_format json -show_chapters -loglevel error > "$WIP/chapters.json"

        # Parses json file for the start time of each chapter.  Also counts number of chapters
        rawChapters=$(jq .chapters[].start_time "$WIP/chapters.json" | wc -l)
        # ffmpeg chapters start at zero.  Subtracting 1 to align with last chapter.
        totalChapters=$(echo $(($rawChapters - 1)) | bc)

	if [ $chapters -ne 0 ]; then
		i=0
		STARTSTOP=""
		# Builds a colon separated list of chapter start:end
		while [ $i -le $totalChapters ]; do
			first=$i
		        last=$(echo $(($i + $CHAPTERSEPISODE - 1)) | bc)
		        STARTSTOP=$(echo "$STARTSTOP $first:$last")
		        i=$(echo $(($i + $CHAPTERSEPISODE)) | bc)
	        done
	else
		STARTSTOP="0:$totalChapters"
	fi
}

# Generates video filters for vpp_qsv
generateFilters () {
	# ffprobe to determine if interlaced.  If yes, set yadif deinterlace filter.
	rawParams=$(ffprobe -loglevel error -i "$INPUTFILE" -select_streams v:0  -show_entries stream=width,height,field_order)
	interlaced=$(echo $rawParams | grep -o 'field_order=[a-z]\+' | awk -F '=' '{print $2}')
	deinterlaced=""

	# Checks for various interface types.  Uses QSV "advanced" de-interlace option if interlaced.
	case $interlaced in
	        tt) deinterlaced="deinterlace=2";;
	        bb) deinterlaced="deinterlace=2";;
	        tb) deinterlaced="deinterlace=2";;
	        bt) deinterlaced="deinterlace=2";;
	        *) deinterlaced="deinterlace=0";;
	esac

	# ffmpeg to detect black bars for cropping.
	rawCrop=$(ffmpeg -ss 250 -to 260 -i "$INPUTFILE" -vf cropdetect=mode=black,metadata=mode=print -f null - 2>&1 | awk '/crop=/ {a=$NF} END{print a}' | awk -F '=' '{print $2}')

	w=$(echo $rawCrop | awk -F ":" '{print $1}')
	h=$(echo $rawCrop | awk -F ":" '{print $2}')
	x=$(echo $rawCrop | awk -F ":" '{print $3}')
	y=$(echo $rawCrop | awk -F ":" '{print $4}')

	# Combines crop and deterinterlace filters.  Always present.
	cropParams="$deinterlaced:cw=$w:ch=$h:cx=$x:cy=$y:async_depth=4"

	# Combines filters
	FILTERS="`echo $cropParams`"
}

# Converts Dolby Vision to HDR10 by removing the DV side channel.  Leaves the BT2020 video as is.
convertDolbyVision () {
        # Extracts the video and discards the DV side channel data
	ffmpeg -y -hide_banner -stats -fflags +genpts+igndts -loglevel error -i $INPUTFILE -map 0 -bsf:v hevc_metadata=remove_dovi=1 -c:v copy -c:a copy -c:s copy -max_muxing_queue_size 2048 -max_interleave_delta 0 -avoid_negative_ts auto HDR10_remux.mkv
	INPUTFILE="$WIP/HDR10_remux.mkv"
}

# Creates lanuage English selection parameters for audio and subtitles.  If ANIME option is enabled, also selects Japanese tracks.
if [ $ANIME -eq 1 ]; then
	echo "Selecting English and Japanese audio/subtitle tracks."
        ffprobe -loglevel error -i "$INPUTFILE" -select_streams a -show_entries stream -v quiet -of json | \
            jq -r '[.streams[] | select(.tags.language == ("eng") or .tags.language == ("jpn"))]' > "$WIP/audio.json"
        if [ "${emptySubJson}" = 'true' ]; then
		echo "No subtitle track"
	else
        	ffprobe -loglevel error -i "$INPUTFILE" -select_streams s -show_entries stream -v quiet -of json | \
	            jq -r '[.streams[] | select(.tags.language == ("eng") or .tags.language == ("jpn"))]' > "$WIP/subtitles.json"
	fi
else
	echo "Selecting English audio/subtitle tracks."
        ffprobe -loglevel error -i "$INPUTFILE" -select_streams a -show_entries stream -v quiet -of json | \
            jq -r '[.streams[] | select(.tags.language == ("eng"))]' > "$WIP/audio.json"
        if [ "${emptySubJson}" = 'true' ]; then
                echo "No subtitle track"
	else
		ffprobe -loglevel error -i "$INPUTFILE" -select_streams s -show_entries stream -v quiet -of json | \
                    jq -r '[.streams[] | select(.tags.language == ("eng"))]' > "$WIP/subtitles.json"
	fi
fi

# If only converting audio, skip everything else
if [ $CONVERTAUDIO -eq 1 ] ; then
	if [ $FOSS -eq 1 ]; then
		echo "Converting audio to OPUS.  Performing audio/sub language selection."
		audioPreProcessing
		fossAudioMapping
		subMapping
		selectLanguageOnly
	else
		echo "Language selection and/or audio conversion only"
		audioPreProcessing
		audioMapping
		subMapping
		selectLanguageOnly
	fi

        # WIP cleanup
        echo "Cleaning up WIP folder."
        rm -f $WIP/*
        exit 0
fi

# If the -c option is used to provide the number of chapters per episode, in instances where a rip has all episodes in one MKV, this will call
# the function.  Otherwise the entire file will be processed.
echo "Generating chapter start/stop times."
splitEpisodes $CHAPTERSEPISODE

# Analyzes video, generates crop, deinterlace, video quality, rescaling parameters for insertion in vpp_qsv filter.
echo "Generating video filter parameters."
generateFilters

# If the -f 1 option is used, all audio tracks will be converted to OPUS.
# If a lossless Dolby/DTS codec exists for English and/or Japanese, the lossy tracks
# will be discarded in favor of converting only the lossless track.
if [ $FOSS -eq 1 ]; then
        echo "Converting audio to OPUS.  Performing audio/sub language selection."
	audioPreProcessing
	fossAudioMapping
	subMapping
else
        echo "Performing audio/sub language selection."
	audioPreProcessing
        audioMapping
	subMapping
fi

# If -d 1 option is used, converts Dolby Vision to HDR10.  Tested with DV 7.6 and 8.1.  Else just extract audio and subtitles and perform language selection.
# Must use jellyfin-ffmpeg 7.0.2-4 and newer.
if [ $DV -eq 1 ]; then
        echo "Converting Dolby Vision to HDR10."
        convertDolbyVision
	av1Encode
else
        echo "Generating final input list and mappings."
	av1Encode
fi

# WIP cleanup
echo "Cleaning up WIP folder."
rm -f $WIP/*
