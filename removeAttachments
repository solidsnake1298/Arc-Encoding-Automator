#!/bin/bash

INPUTFILE=""

# Reads input paramamters
while getopts i: option; do
        case $option in
                i) INPUTFILE=${OPTARG};;
               \?) echo "Invalid option"
                   exit;;
        esac
done

# Removes attachments not used by select ASS sub tracks
removeAttachments () {
	ext=$(echo $INPUTFILE | awk -F '.' '{print $NF}')
	outputFile=$(echo $INPUTFILE | awk -F '/' '{print $NF}' | sed "s/.${ext}/-trimmedAttachments.${ext}/g")
	attachmentCommand=$(subMapping)
        ffmpeg \
                -y \
                -hide_banner \
                -stats \
                -fflags +genpts+igndts \
                -loglevel error \
                -i "$INPUTFILE" \
                -map_chapters 0 \
                -map 0:v \
                -map 0:a \
                ${attachmentCommand} \
		-codec copy \
                -max_muxing_queue_size 2048 \
                -max_interleave_delta 0 \
                -avoid_negative_ts disabled \
                "$outputFile" < /dev/null
}

# Selects and maps English and Japanese subtitle tracks.
subMapping () {
        subIndexArray=""
	SUBCOMMAND=""
        # Checks for no subtitle track.  Common for older fansubs with burned in subtitles.
        if [ "${EMPTYSUBJSON}" = 'true' ]; then
                SUBCOMMAND="-sn"
        else
		SUBCOMMAND="-map 0:s"
	fi
                        
        index=0 
        fonts=""
	firstSubTrack=$(jq -r '.streams[0] | .index' <<< "$SUBFFPROBE" | bc)
	firstAttachmentTrack=$(jq -r '.streams[0] | .index' <<< "$ATTACHMENTFFPROBE" | bc)
        # Checks for attachments.  Only expected when using ASS subtitles.
        if [ "${EMPTYATTACHMENTJSON}" = 'true' ]; then
               ATTACHMENTCOMMAND="-map 0:t?" 
        else
                # When there are fonts, pulls in ASS sub style lines from the tracks selected
                while read subIndex ; do
                        index=$(awk "BEGIN {print $subIndex - $firstSubTrack}" | bc)
                        isSubASS=$(jq --arg l $index '.streams[$l|fromjson] | select(.codec_name == ("ass"))' <<< $SUBFFPROBE | jq -e '. | length != 0')
                        if [ "$isSubASS" = 'true' ]; then
                                newFonts=$(ffmpeg -i "$INPUTFILE" -vn -an -map 0:s:$index -f ass - | egrep "^Style:" | awk -F ':' '{print $2}' | awk -F ',' '{print $2}')
                                fonts+="$newFonts"
                        fi
                done <<< "$(jq '.streams[].index' <<< "$SUBFFPROBE")"
                uniqueFonts=$(echo -e "${fonts}" | sort | uniq)
                ATTACHMENTCOMMAND=$(while read attachmentIndex ; do
                        index=$(awk "BEGIN {print $attachmentIndex - $firstAttachmentTrack}" | bc)
                        fontFileName=$(jq --arg l $index '.streams[$l|fromjson].tags.filename' <<< $ATTACHMENTFFPROBE)
                        ffmpeg -dump_attachment:t:$index "$fontFileName" -i "$INPUTFILE"
                        fontFullName=$(fc-scan "$fontFileName" | egrep "family:|fullname:|postscriptname:" | awk -F ': ' '{print $2}')
			fontPresent=$(egrep "${uniqueFonts//$'\n'/|}" <<< "${fontFullName}")
                        rm -f "$fontFileName"
                        if [[ "$fontPresent" ]]; then
                        	echo "-map 0:t:$index"
                        fi
                done <<< "$(jq '.streams[].index' <<< "$ATTACHMENTFFPROBE")")
        fi
        echo "$SUBCOMMAND $ATTACHMENTCOMMAND"
 
}

SUBFFPROBE=$(ffprobe -loglevel error -i "$INPUTFILE" -select_streams s -show_entries stream -of json)
ATTACHMENTFFPROBE=$(ffprobe -loglevel error -i "$INPUTFILE" -select_streams t -show_entries stream=index -show_entries stream_tags=filename -of json)
EMPTYSUBJSON=$(jq -e '.streams | length == 0' <<< "$SUBFFPROBE")
EMPTYATTACHMENTJSON=$(jq -e '.streams | length == 0' <<< "$ATTACHMENTFFPROBE")

removeAttachments
